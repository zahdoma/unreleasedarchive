var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var childProcess = __toESM(require("child_process"));
function shellExec(cmd, opts) {
  const executable = Array.isArray(cmd) ? cmd.join(";") : cmd;
  const options = __spreadProps(__spreadValues({}, opts), {
    stdio: "pipe",
    cwd: process.cwd()
  });
  const { platform } = process;
  try {
    const cmd2 = platform === "win32" ? "cmd" : "sh";
    const arg = platform === "win32" ? "/C" : "-c";
    const child = childProcess.spawn(cmd2, [arg, executable], options);
    return new Promise((resolve) => {
      const stdoutList = [];
      const stderrList = [];
      if (child.stdout) {
        child.stdout.on("data", (data) => {
          if (Buffer.isBuffer(data))
            return stdoutList.push(data.toString());
          stdoutList.push(data);
        });
      }
      if (child.stderr) {
        child.stderr.on("data", (data) => {
          if (Buffer.isBuffer(data))
            return stderrList.push(data.toString());
          stderrList.push(JSON.stringify(data));
        });
      }
      const getDefaultResult = () => {
        const stderr = stderrList.join("\n");
        const stdout = stdoutList.join("\n");
        return { stdout, stderr, cmd: executable };
      };
      child.on("error", (error) => resolve(__spreadProps(__spreadValues({}, getDefaultResult()), { error })));
      child.on("close", (code) => resolve(__spreadProps(__spreadValues({}, getDefaultResult()), { code })));
    });
  } catch (error) {
    return Promise.reject(error);
  }
}
var src_default = shellExec;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
